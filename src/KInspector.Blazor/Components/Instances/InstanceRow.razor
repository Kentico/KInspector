@using KInspector.Core.Models
@using KInspector.Core.Services.Interfaces
@inject IInstanceService instanceService
@inject IConfigService configService
@inject NavigationManager navigationManager

@{
    var currentInstance = configService.GetCurrentInstance();
    var details = instanceService.GetInstanceDetails(Instance);
}

<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
    <th scope="row" class="flex items-center px-6 py-4 text-gray-900 whitespace-nowrap dark:text-white">
        @if (Instance!.Guid.Equals(currentInstance?.Guid))
        {
            <button type="button"
                @onclick="DisconnectInstance"
                class="text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-500 dark:focus:ring-red-800">
                Disconnect
            </button>
        }
        else
        {
            <button type="button"
                @onclick="SetCurrentInstance"
                class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-500 dark:focus:ring-blue-800">
                Connect
            </button>
        }
        <div class="ps-3">
            <div class="text-base font-semibold">@Instance!.Name</div>
            <div class="font-normal text-gray-500">
                <a href="@Instance!.AdministrationUrl" target="_blank">@Instance!.AdministrationUrl</a>
            </div>
        </div>
    </th>
    <td class="px-6 py-4">
        @details.AdministrationVersion
    </td>
    <td class="px-6 py-4">
        @details.AdministrationDatabaseVersion
    </td>
    <td class="px-6 py-4">
        @if (details.Sites.Any())
        {
            <a href="#" @onclick="() => ShowSites = !ShowSites" class="underline">@(details.Sites.Count())</a>
        }
        else
        {
            <span>0</span>
        }
    </td>
    <td class="px-6 py-4 text-right">
        <button type="button"
            @onclick="DeleteInstance"
            class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center me-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
            <svg class="w-4 h-4 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
            </svg>
            <span class="sr-only">Delete</span>
        </button>
    </td>
</tr>
@if (ShowSites)
{
    <tr class="bg-gray-200 border-b dark:bg-gray-700 dark:border-gray-600">
        <td class="pl-12 pr-6 py-4" colspan="99">
            <SiteTable Sites="@details.Sites" />
        </td>
    </tr>
}

@code {
    [Parameter, EditorRequired]
    public Instance? Instance { get; set; }

    private bool ShowSites { get; set; }

    private void SetCurrentInstance()
    {
        configService.SetCurrentInstance(Instance!.Guid);
        navigationManager.NavigateTo("/instances", true);
    }

    private void DisconnectInstance()
    {
        configService.SetCurrentInstance(null);
        navigationManager.NavigateTo("/instances", true);
    }

    private void DeleteInstance()
    {
        configService.DeleteInstance(Instance!.Guid);
        navigationManager.NavigateTo("/instances", true);
    }
}
