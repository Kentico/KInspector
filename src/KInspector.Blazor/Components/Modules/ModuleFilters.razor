<div class="flex items-center gap-4 w-full mb-5">
    <label class="inline-flex items-center cursor-pointer">
        <input type="checkbox" @bind-value="ShowUntested" class="sr-only peer">
        <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
        <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">Show untested</span>
    </label>
    <label class="inline-flex items-center cursor-pointer">
        <input type="checkbox" @bind-value="ShowIncompatible" class="sr-only peer">
        <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
        <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">Show incompatible</span>
    </label>
    <div class="max-w-sm">
        <select
            @onchange="(e) => SelectedTag = e.Value?.ToString() ?? string.Empty"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            <option value="">Any tag</option>
            @foreach (var tag in Tags!)
            {
                if (tag.Equals(SelectedTag, StringComparison.InvariantCultureIgnoreCase))
                {
                    <option value="@tag" selected>@tag</option>
                }
                else
                {
                    <option value="@tag">@tag</option>
                }
            }
        </select>
    </div>
    <input type="text" placeholder="With name..." @bind-value="NameFilter"
        class="max-w-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
</div>

@code {
    private string tag = string.Empty, nameFilter = string.Empty;
    private bool showUntested, showIncompatible;

    [Parameter]
    public Action? FiltersChanged { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<string>? Tags { get; set; }

    public string NameFilter
    {
        get
        {
            return nameFilter;
        }
        set
        {
            nameFilter = value;
            FiltersChanged?.Invoke();
        }
    }

    public string SelectedTag
    {
        get
        {
            return tag;
        }

        set
        {
            tag = value;
            FiltersChanged?.Invoke();
        }
    }

    public bool ShowUntested
    {
        get
        {
            return showUntested;
        }

        set
        {
            showUntested = value;
            FiltersChanged?.Invoke();
        }
    }

    public bool ShowIncompatible
    {
        get
        {
            return showIncompatible;
        }

        set
        {
            showIncompatible = value;
            FiltersChanged?.Invoke();
        }
    }
}
